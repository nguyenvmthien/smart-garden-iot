{{> sidebar}}
{{> user}}
<!--Main container-->
<div id="messages" class="ml-20"></div>
<div class="main flex flex-col gap-4 ml-24 mr-4 pt-20">
    <div class="data-boxes flex justify-between">
        <div
            class="temp data-box p-4 bg-[#F1FFF5] rounded-3xl flex flex-col gap-2 justify-center items-center w-1/5 h-40">
            <p class="text-xl">Nhiệt độ</p>
            <p id="temperature" class="font-bold text-4xl text-center"></p>
        </div>
        <div
            class="humid data-box p-4 bg-[#F1FFF5] rounded-3xl flex flex-col gap-2 justify-center items-center w-1/5 h-40">
            <p class="text-xl">Độ ẩm</p>
            <p id="humidity" class="font-bold text-4xl text-center"></p>
        </div>
        <div
            class="brightness data-box p-4 bg-[#F1FFF5] rounded-3xl flex flex-col gap-2 justify-center items-center w-1/5 h-40">
            <p class="text-xl">Ánh sáng</p>
            <p id="brightness" class="font-bold text-4xl text-center"></p>
        </div>
        <div
            class="water-level data-box p-4 bg-[#F1FFF5] rounded-3xl flex flex-col gap-2 justify-center items-center w-1/5 h-40">
            <p class="text-xl">Mực nước</p>
            <p id="waterLevel" class="font-bold text-4xl text-center"></p>
        </div>
    </div>

    <div class="charts grid grid-cols-2 gap-4">
        <div class="flex flex-col bg-[#F1FFF5] rounded-xl p-2">
            <div>
                <i class="fa-solid fa-chart-line px-1" style="color: #63E6BE;"></i>
                <span class="font-bold">Nhiệt độ tuần trước (°C)</span>
            </div>
            <canvas class="" id="tempChart"></canvas>
        </div>
        <div class="flex flex-col bg-[#F1FFF5] rounded-xl p-2">
            <div>
                <i class="fa-solid fa-chart-line px-1" style="color: #63E6BE;"></i>
                <span class="font-bold">Độ ẩm tuần trước (%)</span>
            </div>
            <canvas class="" id="humidChart"></canvas>
        </div>
        <div class="flex flex-col bg-[#F1FFF5] rounded-xl p-2">
            <div>
                <i class="fa-solid fa-chart-line px-1" style="color: #63E6BE;"></i>
                <span class="font-bold">Ánh sáng tuần trước (lux)</span>
            </div>
            <canvas class="" id="lightChart"></canvas>
        </div>
        <div class="flex flex-col bg-[#F1FFF5] rounded-xl p-2">
            <div>
                <i class="fa-solid fa-chart-line px-1" style="color: #63E6BE;"></i>
                <span class="font-bold">Mực nước tuần trước (m)</span>
            </div>
            <canvas class="" id="waterChart"></canvas>
        </div>
    </div>
</div>

{{!-- Thông báo --}}
<div id="noti-overlay" class="bg-black bg-opacity-50 w-screen h-screen fixed top-0 left-0 z-[1002] hidden justify-center items-center">
    <div class="w-1/2 h-1/2 bg-white rounded-xl flex flex-col justify-center items-center gap-4" id="noti-box">
    </div>
</div>

<script>
    let weekTemp = [];
    let weekHumid = [];
    let weekBrightness = [];
    let weekWaterLevel = [];
    document.addEventListener('DOMContentLoaded', async () => {
        // sendEmail('Smart Garden', 'Welcome to Smart Garden!');
        await fetch('/get-week-data', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        })
            .then(response => response.json())
            .then(data => {
                console.log(data);
                data.forEach(day => {
                    weekTemp.push(day.temperature);
                    weekHumid.push(day.humidity);
                    weekBrightness.push(day.brightness);
                    weekWaterLevel.push(day.water_level);
                });
                tempChart.data.datasets[0].data = weekTemp;
                humidChart.data.datasets[0].data = weekHumid;
                lightChart.data.datasets[0].data = weekBrightness;
                waterChart.data.datasets[0].data = weekWaterLevel;
                tempChart.update();
                humidChart.update();
                lightChart.update();
                waterChart.update();
            });
    })
    const tempCtx = document.getElementById('tempChart').getContext('2d');
    const tempChart = new Chart(tempCtx, {
        type: 'line',
        data: {
            labels: ['Thứ 2', 'Thứ 3', 'Thứ 4', 'Thứ 5', 'Thứ 6', 'Thứ 7', 'Chủ nhật'],
            datasets: [{
                borderColor: '#1F78B4',
                borderWidth: 2,
                tension: 0.4
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    display: false
                }
            },
            scales: {
                x: {
                    beginAtZero: true
                },
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    const humidCtx = document.getElementById('humidChart').getContext('2d');
    const humidChart = new Chart(humidCtx, {
        type: 'line',
        data: {
            labels: ['Thứ 2', 'Thứ 3', 'Thứ 4', 'Thứ 5', 'Thứ 6', 'Thứ 7', 'Chủ nhật'],
            datasets: [{
                data: [20, 25, 60, 80, 40, 50, 30],
                borderColor: '#1F78B4',
                borderWidth: 2,
                tension: 0.4
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    display: false
                }
            },
            scales: {
                x: {
                    beginAtZero: true
                },
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    const lightCtx = document.getElementById('lightChart').getContext('2d');
    const lightChart = new Chart(lightCtx, {
        type: 'line',
        data: {
            labels: ['Thứ 2', 'Thứ 3', 'Thứ 4', 'Thứ 5', 'Thứ 6', 'Thứ 7', 'Chủ nhật'],
            datasets: [{
                data: [20, 25, 60, 80, 40, 50, 30],
                borderColor: '#1F78B4',
                borderWidth: 2,
                tension: 0.4
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    display: false
                }
            },
            scales: {
                x: {
                    beginAtZero: true
                },
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    const waterCtx = document.getElementById('waterChart').getContext('2d');
    const waterChart = new Chart(waterCtx, {
        type: 'line',
        data: {
            labels: ['Thứ 2', 'Thứ 3', 'Thứ 4', 'Thứ 5', 'Thứ 6', 'Thứ 7', 'Chủ nhật'],
            datasets: [{
                data: [20, 25, 60, 80, 40, 50, 30],
                borderColor: '#1F78B4',
                borderWidth: 2,
                tension: 0.4
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    display: false
                }
            },
            scales: {
                x: {
                    beginAtZero: true
                },
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    // Gửi email
    const email = '{{email}}';
    async function sendEmail(subject, message) {
        await fetch('/send-email', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                to: email,
                subject,
                text: message
            }),
        })
            .then(response => {
                if (!response.ok) {
                    console.error('Failed to send email');
                } else {
                    console.log('Email sent successfully');
                }
            })
            .catch(error => console.error('Error:', error));
    }

    // Kết nối đến HiveMQ WebSocket broker
    const client = mqtt.connect('wss://66e7cd73955d41119db073a43925b11b.s1.eu.hivemq.cloud:8884/mqtt', {
        username: 'smart-garden-web',
        password: 'Username2',
        clientId: 'smart-garden-web-client',
    });

    // Khi kết nối thành công
    client.on('connect', () => {
        console.log('Connected to HiveMQ');
        client.subscribe('smart-garden/#', (err) => {
            if (err) {
                console.error('Failed to subscribe:', err);
            } else {
                console.log('Subscribed to topic: smart-garden/#');
            }
        });
    });

    let temperatureSent = false;
    let humiditySent = false;
    let brightnessSent = false;
    let waterLevelSent = false;
    // Khi nhận được tin nhắn từ broker
    client.on('message', (topic, message) => {
        console.log("Received message on topic:", topic);
        if (topic === 'smart-garden/data') {
            const data = JSON.parse(message.toString()); // Chuyển đổi message sang JSON
            console.log("Received data:", data); // Xem giá trị nhận được

            if (data.temperature !== undefined) {
                document.getElementById('temperature').innerText = data.temperature + " °C"; // Hiển thị nhiệt độ
            }
            if (data.humidity !== undefined) {
                document.getElementById('humidity').innerText = data.humidity + " %"; // Hiển thị độ ẩm
            }
            if (data.brightness !== undefined) {
                document.getElementById('brightness').innerText = data.brightness + " lux"; // Hiển thị ánh sáng
            }
            if (data.waterLevel !== undefined) {
                document.getElementById('waterLevel').innerText = data.waterLevel + " m"; // Hiển thị mực nước
            }

            // Kiểm tra thông số nào vượt ngưỡng so với các ngưỡng trong localStorage
            const savedData = localStorage.getItem('smart-garden-settings');
            if (savedData) {
                const settings = JSON.parse(savedData);
                if (data.temperature >= settings.maxT || data.temperature <= settings.minT) {
                    document.querySelector('.temp').classList.remove('bg-[#F1FFF5]');
                    document.querySelector('.temp').classList.add('bg-[#FFEBEB]');
                    updateSensorData();
                    if (!temperatureSent) {
                        sendEmail(
                            'Cảnh báo nhiệt độ',
                            `Nhiệt độ hiện tại là ${data.temperature}°C, đã vượt ngưỡng (${settings.minT}°C - ${settings.maxT}°C).`
                        );
                        temperatureSent = true;
                    }
                    createNoti('Nhiệt độ');
                }
                else {
                    document.querySelector('.temp').classList.remove('bg-[#FFEBEB]');
                    document.querySelector('.temp').classList.add('bg-[#F1FFF5]');
                    temperatureSent = false;
                }
                if (data.humidity >= settings.maxH || data.humidity <= settings.minH) {
                    document.querySelector('.humid').classList.remove('bg-[#F1FFF5]');
                    document.querySelector('.humid').classList.add('bg-[#FFEBEB]');
                    updateSensorData();
                    if (!humiditySent) {
                        sendEmail(
                            'Cảnh báo độ ẩm',
                            `Độ ẩm hiện tại là ${data.humidity}%, đã vượt ngưỡng (${settings.minH}% - ${settings.maxH}%).`
                        );
                        humiditySent = true;
                    }
                    createNoti('Độ ẩm');
                }
                else {
                    document.querySelector('.humid').classList.remove('bg-[#FFEBEB]');
                    document.querySelector('.humid').classList.add('bg-[#F1FFF5]');
                    humiditySent = false;
                }
                if (data.brightness >= settings.maxB || data.brightness <= settings.minB) {
                    document.querySelector('.brightness').classList.remove('bg-[#F1FFF5]');
                    document.querySelector('.brightness').classList.add('bg-[#FFEBEB]');
                    updateSensorData();
                    if (!brightnessSent) {
                        sendEmail(
                            'Cảnh báo ánh sáng',
                            `Ánh sáng hiện tại là ${data.brightness} lux, đã vượt ngưỡng (${settings.minB} lux - ${settings.maxB} lux).`
                        );
                        brightnessSent = true;
                    }
                    createNoti('Ánh sáng');
                }
                else {
                    document.querySelector('.brightness').classList.remove('bg-[#FFEBEB]');
                    document.querySelector('.brightness').classList.add('bg-[#F1FFF5]');
                    brightnessSent = false;
                }
                if (data.waterLevel <= settings.minHe * settings.tankH / 100) {
                    document.querySelector('.water-level').classList.remove('bg-[#F1FFF5]');
                    document.querySelector('.water-level').classList.add('bg-[#FFEBEB]');
                    updateSensorData();
                    if (!waterLevelSent) {
                        sendEmail(
                            'Cảnh báo mực nước',
                            `Mực nước hiện tại là ${data.waterLevel} m, đã dưới ngưỡng (${settings.minHe}%).`
                        );
                        waterLevelSent = true;
                    }
                    createNoti('Mực nước');
                }
                else {
                    document.querySelector('.water-level').classList.remove('bg-[#FFEBEB]');
                    document.querySelector('.water-level').classList.add('bg-[#F1FFF5]');
                    waterLevelSent = false;
                }
            }
        }
    });

    // Khi xảy ra lỗi
    client.on('error', (error) => {
        console.error('MQTT Error:', error);
    });

    async function updateSensorData() {
        let temperature = document.getElementById('temperature').innerText.replace('°C', '');
        let humidity = document.getElementById('humidity').innerText.replace('%', '');
        let brightness = document.getElementById('brightness').innerText.replace('lux', '');
        let waterLevel = document.getElementById('waterLevel').innerText.replace('m', '');
        console.log("Updating sensors...");
        await fetch('/update-sensors', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ temperature: temperature, humidity: humidity, brightness: brightness, waterLevel: waterLevel })
        })
    }

    function createNoti(sensor) {
        const notiOverlay = document.getElementById('noti-overlay');
        const notiBox = document.getElementById('noti-box');
        notiBox.innerHTML = `
            <i class="fa-solid fa-triangle-exclamation fa-2xl text-red-500"></i>
            <p class="font-medium text-2xl">${sensor} vượt ngưỡng!</p>
        `;
        notiOverlay.classList.remove('hidden');
        notiOverlay.classList.add('flex');
    }

    function exitNoti() {
        const notiOverlay = document.getElementById('noti-overlay');
        notiOverlay.classList.remove('flex');
        notiOverlay.classList.add('hidden');
    }

    // Khi ấn ra ngoài noti-box sẽ tắt noti
    document.getElementById('noti-overlay').addEventListener('click', (e) => {
        const notiBox = document.getElementById('noti-box');
        if (!notiBox.contains(e.target)) {
            exitNoti();
        }
    });

    setInterval(() => {
        updateSensorData();
    }, 10000);
</script>